const fs = require('fs');

const paths = require('../share/paths');
const HostsService = require('./hosts.service');
const DayOffService = require('./dayOff.service');

const dayOffService = new DayOffService('https://isdayoff.ru/');
const hostsService = new HostsService();

const closeTasksText = `
–ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á–∏ üìù (–ø—Ä–∏–º–µ—Ä–Ω–æ –Ω–∞ 1‚Äì2 –¥–Ω—è) üòâ!

–û—Ç–≤–ª–µ–∫–∏—Å—å –∏ —Å—Ö–æ–¥–∏ –∑–∞–∫—Ä–æ–π –∑–∞–¥–∞—á–∏, –Ω–æ –Ω–µ –∑–∞–±—É–¥—å –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:

<blockquote>
‚Ä¢ –ó–∞–∫—Ä—ã–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –Ω—É–∂–Ω–æ –¥–æ 16:00;
‚Ä¢ –í –ø—è—Ç–Ω–∏—Ü—É –≤–µ—á–µ—Ä–æ–º –∑–∞–¥–∞—á–∏ –±—Ä–∞—Ç—å –Ω–µ–ª—å–∑—è ‚Äî –∑–∞–¥–∞—á—É –Ω–µ–ª—å–∑—è –∑–∞–∫—Ä—ã—Ç—å –∏ —Å—Ä–∞–∑—É –±—Ä–∞—Ç—å –≤ —Ä–∞–±–æ—Ç—É –Ω–æ–≤—ã–µ;
‚Ä¢ –ù–æ–≤—ã–µ –±–µ—Ä–µ–º –≤ —Ä–∞–±–æ—Ç—É —Ç–æ–ª—å–∫–æ —Å —É—Ç—Ä–∞.
</blockquote>

–¢—ã –∑–∞–∫—Ä—ã–≤–∞–µ—à—å –∑–∞–¥–∞—á–∏ - –ò–¢ –ª–∏–¥ —Å—á–∞—Å—Ç–ª–∏–≤. –¢—ã —ç—Ç–æ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—à—å - –ò–¢ –ª–∏–¥ –¥–µ–ª–∞–µ—Ç —Ç–µ–±–µ –ø–æ–ø–∞–±–æ–ª—å!
`;

class GeneralService {
    bot = undefined;

    setBot(bot) {
        this.bot = bot;
    }

    async daily() {
        try {
            const teamList = await hostsService.hostsWithoutVacations();
            const teamString = teamList.map(item => `@${item.user_name}`).join(', ');
            await this.bot.sendMessage(process.env.CHAT_ID, `–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –î–µ–π–ª–∏ - ${process.env.DAILY_URL}\n${teamString}`);
            await this.bot.sendSticker(process.env.CHAT_ID, paths.stickers.dailyRandomSticker);
        } catch (e) {
            console.log('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç–æ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –∏–¥—Ç–∏ –Ω–∞ –¥–µ–π–ª–∏', e);
        }
    }

    async youAreHost() {
        try {
            const currentHost = await hostsService.prevHost();
            await this.bot.sendMessage(process.env.CHAT_ID, `‚ö°Ô∏è–°–µ–≥–æ–¥–Ω—è –¥–µ–π–ª–∏ –≤–µ–¥—ë—Ç @${currentHost[0].user_name}`);

            if (!fs.existsSync(paths.stickers.hello)) {
                console.error('‚ùå –ì–∏—Ñ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏:', paths.stickers.hello);
                return;
            }

            const gifStream = fs.createReadStream(paths.stickers.hello);

            gifStream.on('open', async () => {
                try {
                    await this.bot.sendAnimation(currentHost[0].user_id, gifStream, {
                        caption: '–ë—É! –¢—ã —Å–µ–≥–æ–¥–Ω—è –≤–µ–¥—É—â–∏–π.',
                    });
                    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–≤–µ–¥–æ–º–ª—ë–Ω');
                } catch (err) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
                }
            });

            gifStream.on('error', (err) => {
                console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –≥–∏—Ñ–∫–∏:', err);
            });
        } catch (e) {
            console.log(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –æ–Ω –≤–µ–¥—É—â–∏–π - ${e}`);
        }
    }

    async chooseHost() {
        const isDayOff = await dayOffService.isDayOff();
        if (!isDayOff) {
            const how = dayOffService.dayOfWeek === 5 ? '–í –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫' : '–ó–∞–≤—Ç—Ä–∞';

            try {
                const randomHost = await hostsService.randomHost();
                if (randomHost) {
                    await this.bot.sendMessage(process.env.CHAT_ID, `${how} –¥–µ–π–ª–∏ –≤–µ–¥—ë—Ç @${randomHost.user_name}`);
                    if (randomHost.user_name === process.env.EASTER_EGG_NICKNAME) {
                        await this.bot.sendSticker(process.env.CHAT_ID, paths.stickers.easterEgg);
                        await this.bot.sendVoice(process.env.CHAT_ID, paths.voices.easterEgg);
                    } else {
                        await this.bot.sendSticker(process.env.CHAT_ID, paths.stickers.host);
                    }
                }
            } catch (e) {
                console.log('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–µ–¥—É—â–µ–≥–æ –¥–µ–π–ª–∏', e);
            }
        }
    }

    async closeTasks() {
        try {
            await this.bot.sendMessage(process.env.CHAT_ID, closeTasksText, { parse_mode: 'HTML' });
        } catch (e) {
            console.log('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç–æ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á–∏', e);
        }
    }
}

module.exports = GeneralService;
