const { DateTime } = require('luxon');
const fs = require("fs");
const path = require('path');

const basePath = path.join(__dirname, '..');
const stickersPath = `${basePath}/stickers`;
const hostSticker = `${stickersPath}/host.webp`;
const dailyStickersPath = `${stickersPath}/daily`;
const easterEggSticker = `${stickersPath}/easter_egg/easter_egg.webp`;
const easterEggVoice = `${basePath}/voices/peasantwhat3.mp3`;
const dailyStickers = fs.readdirSync(dailyStickersPath);

const randomDailySticker = dailyStickers[Math.floor(Math.random() * dailyStickers.length)];
const randomDailyStickerPath = `${dailyStickersPath}/${randomDailySticker}`;

const bot = require('./bot.service');
const CronService = require('./cron.service');
const DayOffService = require('./dayOff.service');
const HostsService = require('./hosts.service');
const dataBaseService = require('./dataBase.service');

const cronService = new CronService();
const dayOffService = new DayOffService('https://isdayoff.ru/');
const hostsService = new HostsService();

class JobsService {
    dailyJob() {
        return cronService.createJob({
            cronTime: process.env.DAILY_TIME,
            onTick: this._dailyTick,
            start: true,
            timeZone: 'Europe/Moscow',
        });
    }

    hostJob() {
        return cronService.createJob({
            cronTime: process.env.CHOOSE_HOST_TIME,
            onTick: this._hostTick,
            start: true,
            timeZone: 'Europe/Moscow',
        });
    }

     closeTasks() {
         return cronService.createJob({
             cronTime: process.env.CLOSE_TASKS_TIME,
             onTick: this._closeTasksTick,
             start: true,
             timeZone: 'Europe/Moscow',
         });
     }

     deleteOldVacations() {
         return cronService.createJob({
             cronTime: process.env.DELETE_OLD_VACATIONS,
             onTick: this._deleteOldVacationsTick,
             start: true,
             timeZone: 'Europe/Moscow',
         });
     }

     async _deleteOldVacationsTick() {
         const data = await dataBaseService.getVacations();

         const serverDate = new Date();
         const serverDateMoscow = DateTime.fromJSDate(serverDate).setZone('Europe/Moscow').toISODate();

         for (const item of data) {
             const date = item.end_date.split('-').reverse().join('-');
             const utcDate = new Date(date).toISOString().split('T')[0];
             const isMore = serverDateMoscow >= utcDate;

             if (isMore) {
                 try {
                     await dataBaseService.deleteVacation(item.user_id, item.end_date);
                     console.log('–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –æ—Ç–ø—É—Å–∫ —É ' + item.user_id);
                 } catch (e) {
                     await this.bot.sendMessage(process.env.CHAT_ID, `–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–ø—É—Å–∫–∞ @${item.user_name} –∏–∑ –±–∞–∑—ã`);
                     console.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–ø—É—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ${item.user_name} ${e}`);
                 }
             }
         }
     }

    async _dailyTick() {
        try {
            await bot.sendMessage(process.env.CHAT_ID, `–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –î–µ–π–ª–∏ - ${process.env.DAILY_URL}`);
            await bot.sendSticker(process.env.CHAT_ID, randomDailyStickerPath);
        } catch (e) {
            console.log('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç–æ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –∏–¥—Ç–∏ –Ω–∞ –¥–µ–π–ª–º', e);
        }
    }

    async _hostTick() {
        const isDayOff = await dayOffService.isDayOff();
        if (!isDayOff) {
            const how = dayOffService.dayOfWeek === 5 ? '–í –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫' : '–ó–∞–≤—Ç—Ä–∞';

            try {
                const randomHost = await hostsService.randomHost();
                if (randomHost) {
                    await bot.sendMessage(process.env.CHAT_ID, `${how} –¥–µ–π–ª–∏ –≤–µ–¥—ë—Ç @${randomHost.user_name}`);
                    if (randomHost.user_name === process.env.EASTER_EGG_NICKNAME) {
                        await bot.sendSticker(process.env.CHAT_ID, easterEggSticker);
                        await bot.sendVoice(process.env.CHAT_ID, easterEggVoice);
                    } else {
                        await bot.sendSticker(process.env.CHAT_ID, hostSticker);
                    }
                }
            } catch (e) {
                console.log('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–µ–¥—É—â–µ–≥–æ –¥–µ–π–ª–∏', e);
            }
        }
    }

    async _closeTasksTick() {
        try {
            await bot.sendMessage(process.env.CHAT_ID, '–ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á–∏ üìù(–ø—Ä–∏–º–µ—Ä–Ω–æ –Ω–∞ 1-2 –¥–Ω—è) üòâ!');
        } catch (e) {
            console.log('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç–æ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á–∏', e);
        }
    }
}

module.exports = JobsService;
